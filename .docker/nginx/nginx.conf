worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;

    server {
        listen 80;
        listen 443;

        root /usr/share/nginx/html;
        index index.html;

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        location / {
            autoindex on;
            autoindex_exact_size off;
            autoindex_localtime on;
            try_files $uri $uri/ =404;
        }

        # On-disk Brotli-precompressed data files should be served with compression enabled:
        location ~ .+\.(data|symbols\.json)\.br$ {
            # Because this file is already pre-compressed on disk, disable the on-demand compression on it.
            # Otherwise nginx would attempt double compression.
            gzip off;
            # add_header Content-Encoding br;
            default_type application/octet-stream;
            add_header Content-Disposition "inline";
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Pragma "cache";
            access_log off;                      # Optional: Disable logging for static files
        }

        location ~ .+\.(data|symbols\.json)$ {
            # Because this file is already pre-compressed on disk, disable the on-demand compression on it.
            # Otherwise nginx would attempt double compression.
            gzip off;
            default_type application/octet-stream;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Pragma "cache";
            access_log off;                      # Optional: Disable logging for static files
        }

        # On-disk Brotli-precompressed JavaScript code files:
        location ~ .+\.js\.br$ {
            gzip off; # Do not attempt dynamic gzip compression on an already compressed file
            add_header Content-Encoding br;
            default_type application/javascript;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Pragma "cache";
            access_log off;                      # Optional: Disable logging for static files
        }

        # On-disk Brotli-precompressed JavaScript code files:
        location ~ .+\.js$ {
            gzip off; # Do not attempt dynamic gzip compression on an already compressed file
            default_type application/javascript;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Pragma "cache";
            access_log off;                      # Optional: Disable logging for static files
        }

        # On-disk Brotli-precompressed WebAssembly files:
        location ~ .+\.wasm\.br$ {
            gzip off; # Do not attempt dynamic gzip compression on an already compressed file
            add_header Content-Encoding br;
            # Enable streaming WebAssembly compilation by specifying the correct MIME type for
            # Wasm files.
            default_type application/wasm;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Pragma "cache";
            access_log off;                      # Optional: Disable logging for static files
        }

        location ~ .+\.wasm$ {
            gzip off; # Do not attempt dynamic gzip compression on an already compressed file
            # Enable streaming WebAssembly compilation by specifying the correct MIME type for
            # Wasm files.
            default_type application/wasm;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Pragma "cache";
            access_log off;                      # Optional: Disable logging for static files
        }

        # On-disk gzip-precompressed data files should be served with compression enabled:
        location ~ .+\.(data|symbols\.json)\.gz$ {
            gzip off; # Do not attempt dynamic gzip compression on an already compressed file
            add_header Content-Encoding gzip;
            default_type application/gzip;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Pragma "cache";
            access_log off;                      # Optional: Disable logging for static files
        }

        # On-disk gzip-precompressed JavaScript code files:
        location ~ .+\.js\.gz$ {
            gzip off; # Do not attempt dynamic gzip compression on an already compressed file
            add_header Content-Encoding gzip; # The correct MIME type here would be application/octet-stream, but due to Safari bug https://bugs.webkit.org/show_bug.cgi?id=247421, it's preferable to use MIME Type application/gzip instead.
            default_type application/javascript;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Pragma "cache";
            access_log off;                      # Optional: Disable logging for static files
        }

        # On-disk gzip-precompressed WebAssembly files:
        location ~ .+\.wasm\.gz$ {
            gzip off; # Do not attempt dynamic gzip compression on an already compressed file
            add_header Content-Encoding gzip;
            # Enable streaming WebAssembly compilation by specifying the correct MIME type for
            # Wasm files.
            default_type application/wasm;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Pragma "cache";
            access_log off;                      # Optional: Disable logging for static files
        }

        include /etc/nginx/conf.d/*.conf;
    }
}
